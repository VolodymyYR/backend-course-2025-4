// main.js - –§–Ü–ù–ê–õ–¨–ù–ò–ô –†–û–ë–û–ß–ò–ô –ö–û–î (–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è XML-—Å—Ç—Ä—É–∫—Ç—É—Ä–∏)

const { program } = require('commander');
const http = require('http'); 
const fs = require('fs/promises'); 
const path = require('path');
const url = require('url'); 
const { XMLBuilder } = require('fast-xml-parser');

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Commander.js
program
    .requiredOption('-i, --input <path>', '—à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É JSON –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è')
    .requiredOption('-h, --host <address>', '–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞')
    .requiredOption('-p, --port <number>', '–ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞', parseInt)
    .parse(process.argv);

const options = program.opts();
const { input, host, port } = options;

// –û–±'—î–∫—Ç –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è fast-xml-parser
const builderOptions = {
    ignoreAttributes: false,
    format: true,
};
const builder = new XMLBuilder(builderOptions);

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
const checkInputFile = async () => {
    try {
        await fs.access(input);
    } catch (error) {
        console.error("Cannot find input file");
        process.exit(1);
    }
};

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É
const readFlightsData = async (filePath) => {
    try {
        const data = await fs.readFile(filePath, 'utf-8'); 
        const lines = data.split('\n').filter(line => line.trim() !== '');

        return lines.map(line => {
            try {
                return JSON.parse(line);
            } catch (e) {
                return null;
            }
        }).filter(item => item !== null);

    } catch (e) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–∞—Ä—Å–∏–Ω–≥—É JSON:', e.message);
        return [];
    }
};

// –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ HTTP-–∑–∞–ø–∏—Ç—ñ–≤
const requestListener = async (req, res) => {
    res.setHeader('Content-Type', 'text/xml; charset=utf-8');

    try {
        const flights = await readFlightsData(input);
        const query = url.parse(req.url, true).query;
        
        const dateParam = query.date === 'true'; 
        const airtimeMinParam = parseFloat(query.airtime_min); 

        let filteredFlights = flights; 

        // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ airtime_min
        if (!isNaN(airtimeMinParam)) {
            filteredFlights = filteredFlights.filter(flight => 
                parseFloat(flight.AIR_TIME) > airtimeMinParam
            );
        }

        // üí° –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ XML (—Ç–µ–ø–µ—Ä —Ü–µ —á–∏—Å—Ç—ñ –æ–±'—î–∫—Ç–∏)
        const xmlDataItems = filteredFlights.map(flight => {
            const output = {
                air_time: flight.AIR_TIME,
                distance: flight.DISTANCE,
            };
            
            if (dateParam) {
                output.date = flight.FL_DATE;
            }

            return output; 
        });
        
        // üí° –§–Ü–ù–ê–õ–¨–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–±–≥–æ—Ä—Ç–∞–Ω–Ω—è –º–∞—Å–∏–≤—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç—ñ—ó —î–¥–∏–Ω–æ–≥–æ –∫–æ—Ä–µ–Ω—è
        const xmlObject = {
            flights: {
                flight: xmlDataItems
            }
        };
        
        // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è XML
        let xmlContent = builder.build(xmlObject);
        xmlContent = xmlContent.trim(); 

        // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        res.writeHead(200);
        res.end(xmlContent);

    } catch (e) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É:', e);
        res.writeHead(500);
        res.end(`<error>Internal Server Error: ${e.message}</error>`);
    }
};

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
    await checkInputFile(); 

    const server = http.createServer(requestListener);
    
    server.listen(port, host, () => {
        console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ: http://${host}:${port}`);
        console.log(`–í—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª: ${path.resolve(input)}`);
    });

    server.on('error', (err) => {
        if (err.code === 'EADDRINUSE') {
            console.error(`–ü–æ–º–∏–ª–∫–∞: –ê–¥—Ä–µ—Å–∞ ${host}:${port} –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è.`);
        } else {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err.message);
        }
        process.exit(1);
    });
};

startServer();